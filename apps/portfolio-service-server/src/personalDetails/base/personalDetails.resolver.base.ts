/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PersonalDetails } from "./PersonalDetails";
import { PersonalDetailsCountArgs } from "./PersonalDetailsCountArgs";
import { PersonalDetailsFindManyArgs } from "./PersonalDetailsFindManyArgs";
import { PersonalDetailsFindUniqueArgs } from "./PersonalDetailsFindUniqueArgs";
import { CreatePersonalDetailsArgs } from "./CreatePersonalDetailsArgs";
import { UpdatePersonalDetailsArgs } from "./UpdatePersonalDetailsArgs";
import { DeletePersonalDetailsArgs } from "./DeletePersonalDetailsArgs";
import { PersonalDetailsService } from "../personalDetails.service";
@graphql.Resolver(() => PersonalDetails)
export class PersonalDetailsResolverBase {
  constructor(protected readonly service: PersonalDetailsService) {}

  async _personalDetailsItemsMeta(
    @graphql.Args() args: PersonalDetailsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PersonalDetails])
  async personalDetailsItems(
    @graphql.Args() args: PersonalDetailsFindManyArgs
  ): Promise<PersonalDetails[]> {
    return this.service.personalDetailsItems(args);
  }

  @graphql.Query(() => PersonalDetails, { nullable: true })
  async personalDetails(
    @graphql.Args() args: PersonalDetailsFindUniqueArgs
  ): Promise<PersonalDetails | null> {
    const result = await this.service.personalDetails(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PersonalDetails)
  async createPersonalDetails(
    @graphql.Args() args: CreatePersonalDetailsArgs
  ): Promise<PersonalDetails> {
    return await this.service.createPersonalDetails({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PersonalDetails)
  async updatePersonalDetails(
    @graphql.Args() args: UpdatePersonalDetailsArgs
  ): Promise<PersonalDetails | null> {
    try {
      return await this.service.updatePersonalDetails({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PersonalDetails)
  async deletePersonalDetails(
    @graphql.Args() args: DeletePersonalDetailsArgs
  ): Promise<PersonalDetails | null> {
    try {
      return await this.service.deletePersonalDetails(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
