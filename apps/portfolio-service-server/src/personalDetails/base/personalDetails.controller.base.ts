/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PersonalDetailsService } from "../personalDetails.service";
import { PersonalDetailsCreateInput } from "./PersonalDetailsCreateInput";
import { PersonalDetails } from "./PersonalDetails";
import { PersonalDetailsFindManyArgs } from "./PersonalDetailsFindManyArgs";
import { PersonalDetailsWhereUniqueInput } from "./PersonalDetailsWhereUniqueInput";
import { PersonalDetailsUpdateInput } from "./PersonalDetailsUpdateInput";

export class PersonalDetailsControllerBase {
  constructor(protected readonly service: PersonalDetailsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PersonalDetails })
  async createPersonalDetails(
    @common.Body() data: PersonalDetailsCreateInput
  ): Promise<PersonalDetails> {
    return await this.service.createPersonalDetails({
      data: data,
      select: {
        bio: true,
        createdAt: true,
        email: true,
        fullName: true,
        id: true,
        phone: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PersonalDetails] })
  @ApiNestedQuery(PersonalDetailsFindManyArgs)
  async personalDetailsItems(
    @common.Req() request: Request
  ): Promise<PersonalDetails[]> {
    const args = plainToClass(PersonalDetailsFindManyArgs, request.query);
    return this.service.personalDetailsItems({
      ...args,
      select: {
        bio: true,
        createdAt: true,
        email: true,
        fullName: true,
        id: true,
        phone: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PersonalDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async personalDetails(
    @common.Param() params: PersonalDetailsWhereUniqueInput
  ): Promise<PersonalDetails | null> {
    const result = await this.service.personalDetails({
      where: params,
      select: {
        bio: true,
        createdAt: true,
        email: true,
        fullName: true,
        id: true,
        phone: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PersonalDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePersonalDetails(
    @common.Param() params: PersonalDetailsWhereUniqueInput,
    @common.Body() data: PersonalDetailsUpdateInput
  ): Promise<PersonalDetails | null> {
    try {
      return await this.service.updatePersonalDetails({
        where: params,
        data: data,
        select: {
          bio: true,
          createdAt: true,
          email: true,
          fullName: true,
          id: true,
          phone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PersonalDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePersonalDetails(
    @common.Param() params: PersonalDetailsWhereUniqueInput
  ): Promise<PersonalDetails | null> {
    try {
      return await this.service.deletePersonalDetails({
        where: params,
        select: {
          bio: true,
          createdAt: true,
          email: true,
          fullName: true,
          id: true,
          phone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
